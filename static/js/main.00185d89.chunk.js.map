{"version":3,"sources":["store/index.ts","api/api.ts","constants.ts","components/Buttons/ButtonData.ts","components/Buttons/Buttons.tsx","components/Start/Start.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["toggleLoading","type","getNewTodos","todos","setFilter","filterType","deleteTodo","todoId","getTodos","state","isLoading","loading","getFilter","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","getData","url","a","fetch","then","respond","json","response","data","getPrepearedTodos","users","map","user","find","person","userId","ButtonsData","title","mapDispatch","connector","connect","dispatch","useDispatch","button","className","onClick","actionTitle","onFilterType","key","load","getTodosFromServer","getList","actionLoading","actionTodos","length","disabled","delete","completed","name","actionDelete","onDelete","filtredList","sort","todoA","todoB","localeCompare","Number","getNewData","task","App","useSelector","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00185d89.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { TodosWithUser } from '../interfaces';\n\nconst TOGGLE_LOADING = 'TOGGLE_LOADING';\nconst GET_TODOS = 'GET_TODOS';\nconst SET_FILTER = 'SET_FILTER';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const toggleLoading = () => ({ type: TOGGLE_LOADING });\nexport const getNewTodos = (todos: TodosWithUser[]) => ({ type: GET_TODOS, todos });\nexport const setFilter = (filterType: string) => ({ type: SET_FILTER, filterType });\nexport const deleteTodo = (todoId: number) => ({ type: DELETE_TODO, todoId });\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const isLoading = (state: RootState) => state.loading;\nexport const getFilter = (state: RootState) => state.filterType;\n\nexport type RootState = {\n  todos: TodosWithUser[];\n  loading: boolean;\n  filterType: string;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  filterType: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      return { ...state, loading: !state.loading };\n    case GET_TODOS:\n      return { ...state, todos: action.todos };\n    case SET_FILTER:\n      return { ...state, filterType: action.filterType };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.todoId),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import { API_URL_TODOS, API_URL_USERS } from '../constants';\nimport { Todo, User, TodosWithUser } from '../interfaces';\n\nconst getData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url).then(respond => respond.json());\n\n  return response.data;\n};\n\nexport const getPrepearedTodos = async (): Promise<TodosWithUser[]> => {\n  const todos = await getData<Todo>(API_URL_TODOS);\n  const users = await getData<User>(API_URL_USERS);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId) as User,\n  }));\n};\n","export const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nexport const API_URL_USERS = 'https://mate.academy/students-api/users';\n","export interface Button {\n  title: string;\n}\n\nexport const ButtonsData: Button[] = [\n  {\n    title: 'Sort by title',\n  },\n  {\n    title: 'Sort by completed',\n  },\n  {\n    title: 'Sort by name',\n  },\n];\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { ButtonsData } from './ButtonData';\n\nimport {\n  RootState,\n  setFilter,\n  getFilter,\n} from '../../store';\nimport './Buttons.css';\n\nconst mapState = (state: RootState) => {\n  return {\n    filterType: getFilter(state),\n  };\n};\n\nconst mapDispatch = {\n  filter: setFilter,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nconst Buttons: React.FC = () => {\n  const dispatch = useDispatch();\n  const onFilterType = (title: string) => {\n    const actionTitle = setFilter(title);\n\n    dispatch(actionTitle);\n  };\n\n  return (\n    <>\n      {ButtonsData.map(button => (\n        <button\n          className=\"button\"\n          onClick={() => onFilterType(button.title)}\n          key={button.title}\n          type=\"button\"\n        >\n          {button.title}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default connector(Buttons);\n","import React from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport { getPrepearedTodos } from '../../api/api';\nimport Buttons from '../Buttons/Buttons';\n\nimport {\n  RootState,\n  isLoading,\n  toggleLoading,\n  getTodos,\n  getNewTodos,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n    loading: isLoading(state),\n  };\n};\n\nconst mapDispatch = {\n  load: toggleLoading,\n  getTodosFromServer: getNewTodos,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todos: TodosWithUser[];\n  loading: boolean;\n};\n\nconst Start: React.FC<Props> = ({ todos, loading }) => {\n  const dispatch = useDispatch();\n  const getList = async () => {\n    const actionLoading = toggleLoading();\n\n    dispatch(actionLoading);\n    const actionTodos = await getPrepearedTodos().then(data => getNewTodos(data));\n\n    dispatch(actionTodos);\n    dispatch(actionLoading);\n  };\n\n  return (\n    <div>\n      {!todos.length\n        ? (\n          <button\n            type=\"button\"\n            onClick={getList}\n            disabled={loading}\n          >\n            Load data\n          </button>\n        )\n        : <Buttons />}\n    </div>\n  );\n};\n\nexport default connector(Start);\n","import React from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport './TodoItem.css';\n\nimport {\n  RootState,\n  getTodos,\n  deleteTodo,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n  };\n};\n\nconst mapDispatch = {\n  delete: deleteTodo,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todo: TodosWithUser;\n};\n\nconst TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    completed,\n    title,\n    user,\n    id,\n  } = todo;\n  const dispatch = useDispatch();\n\n  const onDelete = (todoId: number) => {\n    const actionDelete = deleteTodo(todoId);\n\n    dispatch(actionDelete);\n  };\n\n  return (\n    <>\n      <div className={completed ? 'done' : 'undone'} />\n      <p className=\"task\">\n        {title}\n      </p>\n      <p className=\"person\">\n        {user.name}\n      </p>\n      <button\n        onClick={() => onDelete(id)}\n        className=\"delete-btn\"\n        type=\"button\"\n      >\n        x\n      </button>\n    </>\n  );\n};\n\nexport default connector(TodoItem);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport TodoItem from '../TodoItem/TodoItem';\nimport './TodoList.css';\n\nimport {\n  RootState,\n  getTodos,\n  getFilter,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n    filterType: getFilter(state),\n  };\n};\n\nconst getNewData = (title: string, data: TodosWithUser[]): TodosWithUser[] => {\n  switch (title) {\n    case 'Sort by title':\n      return [...data].sort((todoA, todoB) => todoA.title.localeCompare(todoB.title));\n    case 'Sort by completed':\n      return [...data].sort((todoA, todoB) => Number(todoB.completed) - Number(todoA.completed));\n    case 'Sort by name':\n      return [...data].sort((todoA, todoB) => todoA.user.name.localeCompare(todoB.user.name));\n    default:\n      return data;\n  }\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todos: TodosWithUser[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos, filterType }) => {\n  const filtredList = getNewData(filterType, todos);\n\n  return (\n    <ul className=\"list\">\n      {filtredList.map(task => (\n        <li key={task.id} className=\"list-item\">\n          <TodoItem todo={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default connector(TodoList);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start/Start';\n\nimport { isLoading } from './store';\nimport TodoList from './components/TodoList/TodoList';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2 className=\"loading\">{loading && 'Loading...'}</h2>\n\n      <Start />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}