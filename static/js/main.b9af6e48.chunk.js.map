{"version":3,"sources":["store/index.ts","api/api.ts","constants.ts","components/Buttons/ButtonData.ts","components/Buttons/Buttons.tsx","components/Start/Start.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["toggleLoading","type","getNewTodos","todos","setFilter","filterType","getTodos","state","isLoading","loading","getFilter","initialState","store","createStore","action","composeWithDevTools","getData","url","a","fetch","then","respond","json","response","data","getPrepearedTodos","users","map","todo","user","find","person","id","userId","ButtonsData","title","mapDispatch","filter","connector","connect","dispatch","useDispatch","button","className","onClick","actionTitle","onFilterType","key","load","getTodosFromServer","getList","actionLoading","actionTodos","length","disabled","completed","name","filtredList","sort","todoA","todoB","localeCompare","Number","getNewData","task","App","useSelector","Root","ReactDOM","render","document","getElementById"],"mappings":"iUAQaA,EAAgB,iBAAO,CAAEC,KAJf,mBAKVC,EAAc,SAACC,GAAD,MAA6B,CAAEF,KAJxC,YAIyDE,UAC9DC,EAAY,SAACC,GAAD,MAAyB,CAAEJ,KAJjC,aAImDI,eAEzDC,EAAW,SAACC,GAAD,OAAsBA,EAAMJ,OACvCK,EAAY,SAACD,GAAD,OAAsBA,EAAME,SACxCC,EAAY,SAACH,GAAD,OAAsBA,EAAMF,YAQ/CM,EAA0B,CAC9BR,MAAO,GACPM,SAAS,EACTJ,WAAY,IAsBCO,EALDC,uBAdM,WAA8C,IAA7CN,EAA4C,uDAApCI,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOb,MACb,IA1BmB,iBA2BjB,OAAO,2BAAKM,GAAZ,IAAmBE,SAAUF,EAAME,UACrC,IA3Bc,YA4BZ,OAAO,2BAAKF,GAAZ,IAAmBJ,MAAOW,EAAOX,QACnC,IA5Be,aA6Bb,OAAO,2BAAKI,GAAZ,IAAmBF,WAAYS,EAAOT,aAExC,QACE,OAAOE,KAMXQ,iC,gCCzCIC,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACSC,MAAMF,GAAKG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAD5C,cACRC,EADQ,yBAGPA,EAASC,MAHF,2CAAH,sDAMAC,EAAiB,uCAAG,8BAAAP,EAAA,sEACXF,ECVO,2CDSI,cACzBb,EADyB,gBAEXa,ECVO,2CDQI,cAEzBU,EAFyB,yBAIxBvB,EAAMwB,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,KAAMH,EAAMI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,EAAKK,gBANjB,2CAAH,qDELjBC,EAAwB,CACnC,CACEC,MAAO,iBAET,CACEA,MAAO,qBAET,CACEA,MAAO,iBCKLC,G,MAAc,CAClBC,OAAQjC,IA6BKkC,EA1BGC,aAVD,SAAChC,GAChB,MAAO,CACLF,WAAYK,EAAUH,MAQU6B,EA0BrBE,EAxBW,WACxB,IAAME,EAAWC,cAOjB,OACE,oCACGP,EAAYP,KAAI,SAAAe,GAAM,OACrB,4BACEC,UAAU,SACVC,QAAS,kBAXI,SAACT,GACpB,IAAMU,EAAczC,EAAU+B,GAE9BK,EAASK,GAQYC,CAAaJ,EAAOP,QACnCY,IAAKL,EAAOP,MACZlC,KAAK,UAEJyC,EAAOP,cCnBZC,EAAc,CAClBY,KAAMhD,EACNiD,mBAAoB/C,GAuCPoC,EApCGC,aAZD,SAAChC,GAChB,MAAO,CACLJ,MAAOG,EAASC,GAChBE,QAASD,EAAUD,MASa6B,EAoCrBE,EA7BgB,SAAC,GAAwB,IAAtBnC,EAAqB,EAArBA,MAAOM,EAAc,EAAdA,QACjC+B,EAAWC,cACXS,EAAO,uCAAG,8BAAAhC,EAAA,6DAGdsB,EAFMW,EL5B0B,CAAElD,KAJf,mBK+BL,SAIYwB,IAAoBL,MAAK,SAAAI,GAAI,OAAItB,EAAYsB,MAJzD,OAIR4B,EAJQ,OAMdZ,EAASY,GACTZ,EAASW,GAPK,2CAAH,qDAUb,OACE,6BACIhD,EAAMkD,OAUJ,kBAAC,EAAD,MARA,4BACEpD,KAAK,SACL2C,QAASM,EACTI,SAAU7C,GAHZ,iB,QCXK6B,G,MAtBGC,aAND,SAAChC,GAChB,MAAO,CACLJ,MAAOG,EAASC,MA0BL+B,EAhBmB,SAAC,GAAc,IAAZV,EAAW,EAAXA,KAC3B2B,EAA2B3B,EAA3B2B,UAAWpB,EAAgBP,EAAhBO,MAAON,EAASD,EAATC,KAE1B,OACE,oCACE,yBAAKc,UAAWY,EAAY,OAAS,WACrC,uBAAGZ,UAAU,QACVR,GAEH,uBAAGQ,UAAU,UACVd,EAAK2B,WCmBClB,EApBGC,aApBD,SAAChC,GAChB,MAAO,CACLJ,MAAOG,EAASC,GAChBF,WAAYK,EAAUH,MAqCX+B,EAdmB,SAAC,GAA2B,IAAzBnC,EAAwB,EAAxBA,MAC7BsD,EApBW,SAACtB,EAAeX,GACjC,OAAQW,GACN,IAAK,gBACH,OAAO,YAAIX,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMxB,MAAM0B,cAAcD,EAAMzB,UAC1E,IAAK,oBACH,OAAO,YAAIX,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBE,OAAOF,EAAML,WAAaO,OAAOH,EAAMJ,cACjF,IAAK,eACH,OAAO,YAAI/B,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAM9B,KAAK2B,KAAKK,cAAcD,EAAM/B,KAAK2B,SACnF,QACE,OAAOhC,GAWSuC,CADuC,EAAjB1D,WACCF,GAE3C,OACE,wBAAIwC,UAAU,QACXc,EAAY9B,KAAI,SAAAqC,GAAI,OACnB,wBAAIjB,IAAKiB,EAAKhC,GAAIW,UAAU,YAC1B,kBAAC,EAAD,CAAUf,KAAMoC,YCrBXC,EAdH,WACV,IAAMxD,EAAUyD,YAAY1D,GAE5B,OACE,yBAAKmC,UAAU,OACb,mDACA,wBAAIA,UAAU,WAAWlC,GAAW,cAEpC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCVA0D,EAAO,kBACX,kBAAC,IAAD,CAAUvD,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNwD,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.b9af6e48.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { TodosWithUser } from '../interfaces';\n\nconst TOGGLE_LOADING = 'TOGGLE_LOADING';\nconst GET_TODOS = 'GET_TODOS';\nconst SET_FILTER = 'SET_FILTER';\n\nexport const toggleLoading = () => ({ type: TOGGLE_LOADING });\nexport const getNewTodos = (todos: TodosWithUser[]) => ({ type: GET_TODOS, todos });\nexport const setFilter = (filterType: string) => ({ type: SET_FILTER, filterType });\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const isLoading = (state: RootState) => state.loading;\nexport const getFilter = (state: RootState) => state.filterType;\n\nexport type RootState = {\n  todos: TodosWithUser[];\n  loading: boolean;\n  filterType: string;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  filterType: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      return { ...state, loading: !state.loading };\n    case GET_TODOS:\n      return { ...state, todos: action.todos };\n    case SET_FILTER:\n      return { ...state, filterType: action.filterType };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import { API_URL_TODOS, API_URL_USERS } from '../constants';\nimport { Todo, User, TodosWithUser } from '../interfaces';\n\nconst getData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url).then(respond => respond.json());\n\n  return response.data;\n};\n\nexport const getPrepearedTodos = async (): Promise<TodosWithUser[]> => {\n  const todos = await getData<Todo>(API_URL_TODOS);\n  const users = await getData<User>(API_URL_USERS);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId) as User,\n  }));\n};\n","export const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nexport const API_URL_USERS = 'https://mate.academy/students-api/users';\n","export interface Button {\n  title: string;\n}\n\nexport const ButtonsData: Button[] = [\n  {\n    title: 'Sort by title',\n  },\n  {\n    title: 'Sort by completed',\n  },\n  {\n    title: 'Sort by name',\n  },\n];\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { ButtonsData } from './ButtonData';\n\nimport {\n  RootState,\n  setFilter,\n  getFilter,\n} from '../../store';\nimport './Buttons.css';\n\nconst mapState = (state: RootState) => {\n  return {\n    filterType: getFilter(state),\n  };\n};\n\nconst mapDispatch = {\n  filter: setFilter,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nconst Buttons: React.FC = () => {\n  const dispatch = useDispatch();\n  const onFilterType = (title: string) => {\n    const actionTitle = setFilter(title);\n\n    dispatch(actionTitle);\n  };\n\n  return (\n    <>\n      {ButtonsData.map(button => (\n        <button\n          className=\"button\"\n          onClick={() => onFilterType(button.title)}\n          key={button.title}\n          type=\"button\"\n        >\n          {button.title}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default connector(Buttons);\n","import React from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport { getPrepearedTodos } from '../../api/api';\nimport Buttons from '../Buttons/Buttons';\n\nimport {\n  RootState,\n  isLoading,\n  toggleLoading,\n  getTodos,\n  getNewTodos,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\n  };\n};\n\nconst mapDispatch = {\n  load: toggleLoading,\n  getTodosFromServer: getNewTodos,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todos: TodosWithUser[];\n  loading: boolean;\n};\n\nconst Start: React.FC<Props> = ({ todos, loading }) => {\n  const dispatch = useDispatch();\n  const getList = async () => {\n    const actionLoading = toggleLoading();\n\n    dispatch(actionLoading);\n    const actionTodos = await getPrepearedTodos().then(data => getNewTodos(data));\n\n    dispatch(actionTodos);\n    dispatch(actionLoading);\n  };\n\n  return (\n    <div>\n      {!todos.length\n        ? (\n          <button\n            type=\"button\"\n            onClick={getList}\n            disabled={loading}\n          >\n            Load data\n          </button>\n        )\n        : <Buttons />}\n    </div>\n  );\n};\n\nexport default connector(Start);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport './TodoItem.css';\n\nimport {\n  RootState,\n  getTodos,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n  };\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todo: TodosWithUser;\n};\n\nconst TodoItem: React.FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <>\n      <div className={completed ? 'done' : 'undone'} />\n      <p className=\"task\">\n        {title}\n      </p>\n      <p className=\"person\">\n        {user.name}\n      </p>\n    </>\n  );\n};\n\nexport default connector(TodoItem);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { TodosWithUser } from '../../interfaces';\nimport TodoItem from '../TodoItem/TodoItem';\n\nimport {\n  RootState,\n  getTodos,\n  getFilter,\n} from '../../store';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getTodos(state),\n    filterType: getFilter(state),\n  };\n};\n\nconst getNewData = (title: string, data: TodosWithUser[]): TodosWithUser[] => {\n  switch (title) {\n    case 'Sort by title':\n      return [...data].sort((todoA, todoB) => todoA.title.localeCompare(todoB.title));\n    case 'Sort by completed':\n      return [...data].sort((todoA, todoB) => Number(todoB.completed) - Number(todoA.completed));\n    case 'Sort by name':\n      return [...data].sort((todoA, todoB) => todoA.user.name.localeCompare(todoB.user.name));\n    default:\n      return data;\n  }\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector> & {\n  todos: TodosWithUser[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos, filterType }) => {\n  const filtredList = getNewData(filterType, todos);\n\n  return (\n    <ul className=\"list\">\n      {filtredList.map(task => (\n        <li key={task.id} className=\"listItem\">\n          <TodoItem todo={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default connector(TodoList);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start/Start';\n\nimport { isLoading } from './store';\nimport TodoList from './components/TodoList/TodoList';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2 className=\"loading\">{loading && 'Loading...'}</h2>\n\n      <Start />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}