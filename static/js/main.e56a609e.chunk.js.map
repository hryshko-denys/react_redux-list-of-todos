{"version":3,"sources":["store/index.ts","components/Start.tsx","components/Finish.tsx","App.tsx","index.tsx"],"names":["isLoading","state","loading","getMessage","message","initialState","store","createStore","action","type","composeWithDevTools","mapDispatch","load","connector","connect","title","onClick","disabled","Finish","dispatch","useDispatch","useSelector","finishLoading","App","className","Root","ReactDOM","render","document","getElementById"],"mappings":"sRAYaA,EAAY,SAACC,GAAD,OAAsBA,EAAMC,SACxCC,EAAa,SAACF,GAAD,OAAsBA,EAAMG,SAQhDC,EAA0B,CAC9BH,SAAS,EACTE,QAAS,IA2BIE,EALDC,uBAlBM,WAA8C,IAA7CN,EAA4C,uDAApCI,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOC,MACb,IAzBkB,gBA0BhB,OAAO,2BAAKR,GAAZ,IAAmBC,SAAS,IAE9B,IA3BmB,iBA4BjB,OAAO,2BACFD,GADL,IAEEC,SAAS,EACTE,QAASI,EAAOJ,UAGpB,QACE,OAAOH,KAOXS,iCCtBIC,G,MAAc,CAClBC,KDlB0B,iBAAO,CAAEH,KAJf,oBCmDPI,EAtBGC,aAnBD,SAACb,GAChB,MAAO,CACLC,QAASF,EAAUC,MAiBaU,EAsBrBE,EAZgB,SAAC,GAA8B,IAA5BD,EAA2B,EAA3BA,KAAMV,EAAqB,EAArBA,QAASa,EAAY,EAAZA,MAC/C,OACE,4BACEN,KAAK,SACLO,QAASJ,EACTK,SAAUf,GAETa,MCxCMG,EAA0B,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOX,EAAc,EAAdA,QACzCe,EAAWC,cACXlB,EAAUmB,YAAYrB,GAc5B,OACE,4BACES,KAAK,SACLO,QAfgB,WAGlB,IAAMR,EFRmB,eAACJ,EAAD,uDAAW,aAAX,MAA6B,CAAEK,KAJrC,iBAI2DL,WEQ/DkB,CAAclB,GAG7Be,EAASX,IAUPS,UAAWf,GAEVa,ICNQQ,EAhBH,WACV,IAAMrB,EAAUmB,YAAYrB,GACtBI,EAAUiB,YAAYlB,IAAe,SAE3C,OACE,yBAAKqB,UAAU,OACb,mDACA,4BAAKtB,EAAU,aAAeE,GAE9B,kBAAC,EAAD,CAAOW,MAAM,kBACb,kBAAC,EAAD,CAAQA,MAAM,kBAAkBX,QAAQ,yBACxC,kBAAC,EAAD,CAAQW,MAAM,eAAeX,QAAQ,2CCXrCqB,EAAO,kBACX,kBAAC,IAAD,CAAUnB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNoB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.e56a609e.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  message: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState, isLoading, startLoading } from '../store';\n\n/**\n * mapState - is a function receiving full Redux state as the first argument\n * and returning an object with extra props that will be added to a component\n * after calling connect(mapState)(MyComponent)\n *\n * @param {object} state - full Redux state\n *\n * @return {object}\n */\nconst mapState = (state: RootState) => {\n  return {\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\n  };\n};\n\n/**\n * We use an object syntax for `mapDispatch` where\n * `load` - is a callback name passed to the component as a prop\n * `startLoading` - is an action creator defined in the store\n */\nconst mapDispatch = {\n  load: startLoading,\n};\n\n/**\n * We split the connect(mapState, mapDispatch)(MyComponent) into 2 parts\n * to be able to use `typeof connector` for `MyComponent` props\n */\nconst connector = connect(mapState, mapDispatch);\n\n/**\n * We use ConnectedProps<typeof connector> to get the type for all the extra\n * props received from `mapState` and `mapDispatch`\n */\ntype Props = ConnectedProps<typeof connector> & {\n  title: string; // a regular prop passed like <Start title=\"Start loading\" />\n};\n\nconst Start: React.FC<Props> = ({ load, loading, title }) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={load}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default connector(Start);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { isLoading, finishLoading } from '../store';\n\ntype Props = {\n  title: string;\n  message: string;\n};\n\nexport const Finish: React.FC<Props> = ({ title, message }) => {\n  const dispatch = useDispatch(); // it is a link to `store.dispatch` method\n  const loading = useSelector(isLoading); // we pass a link to selector function here\n\n  const handleClick = () => {\n    // action creator returns an action object\n    // { type: 'FINISH_LOADING', message: 'the value of a message prop' }\n    const action = finishLoading(message);\n\n    // we dispatch an action to Redux\n    dispatch(action);\n\n    // it could be shortened to\n    // dispatch(finishLoading(message));\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleClick}\n      disabled={!loading}\n    >\n      {title}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start';\nimport { Finish } from './components/Finish';\n\nimport { isLoading, getMessage } from './store';\n\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n\n      <Start title=\"Start loading\" />\n      <Finish title=\"Succeed loading\" message=\"Loaded successfully!\" />\n      <Finish title=\"Fail loading\" message=\"An error occurred when loading data.\" />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}